name: Build and Test

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  FR_MODEL_DIR: /tmp/models
  CI: 1

jobs:
  build-and-test:
    # Use ubuntu 20.04 to build with enough old glibc, so that products can be distributed to more Linux distributions
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Install Ninja
      run: |
        sudo apt-get install ninja-build

    - name: Download Tokenizer and ChatRWKV Models
      run: |
        mkdir ${{env.FR_MODEL_DIR}}
        cd ${{env.FR_MODEL_DIR}}
        wget https://huggingface.co/BlinkDL/rwkv-4-world/resolve/main/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth 
        wget https://huggingface.co/BlinkDL/rwkv-5-world/resolve/main/RWKV-5-World-0.1B-v1-20230803-ctx4096.pth
        wget https://huggingface.co/BlinkDL/rwkv-5-music/resolve/main/RWKV-5-ABC-82M-v1-20230901-ctx1024.pth
        wget https://huggingface.co/daquexian/fr-models/resolve/dd4d636/world_tokenizer -O old_world_tokenizer
        mkdir -p RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16
        cd RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16
        wget https://huggingface.co/daquexian/fr-models/resolve/02382cd/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/RWKV-5-World-0.1B-v1-20230803-ctx4096-ncnn.bin
        wget https://huggingface.co/daquexian/fr-models/resolve/02382cd/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/RWKV-5-World-0.1B-v1-20230803-ctx4096-ncnn.param
        wget https://huggingface.co/daquexian/fr-models/resolve/02382cd/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/RWKV-5-World-0.1B-v1-20230803-ctx4096-ncnn.config
        wget https://huggingface.co/daquexian/fr-models/resolve/main/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/tokenizer
        cd ${{env.FR_MODEL_DIR}}
        mkdir tokenizers
        cd tokenizers
        wget https://huggingface.co/daquexian/fr-models/resolve/main/tokenizers/world_tokenizer
        wget https://huggingface.co/daquexian/fr-models/resolve/main/tokenizers/simple_abc_tokenizer
        wget https://huggingface.co/daquexian/fr-models/resolve/main/tokenizers/abc_tokenizer_v20230913

    - name: Convert ChatRWKV Models
      run: |
        git clone https://github.com/BlinkDL/ChatRWKV
        cd ChatRWKV
        pip install -r requirements.txt
        pip install numpy
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        cd rwkv_pip_package
        pip install .
        cd ..
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32-converted.pth --strategy "cuda fp32"
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16-converted.pth --strategy "cuda fp16"
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32-converted.pth --strategy "cuda fp32"
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32-converted.pth --strategy "cuda fp32"
        cd ..
        pip install -r tools/requirements.txt
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32.fr
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16.fr
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32.fr
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32.fr

    - name: Build
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -GNinja
        cmake --build ${{github.workspace}}/build

    - name: Upload Executables
      uses: actions/upload-artifact@v3
      with:
        name: export_ncnn
        path: |
          build/export_ncnn

    - name: Run C++ tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        FR_MODEL_DIR=${{env.FR_MODEL_DIR}} ctest -vv --output-on-failure --test-dir tests
      working-directory: ${{github.workspace}}/build/

    - name: Convert the v5 ABC model to ncnn for ABC ppl test
      run: |
        ${{github.workspace}}/build/export_ncnn ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32.fr ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-ncnn fp16

    - name: Run ABC ppl test
      run: |
        pip install datasets msgpack
        python3 tests/run_abc_benchmark.py ${{github.workspace}}/build/tests/run_abc_benchmark ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-ncnn

    - name: Build Python wheel
      run: |
        # Ubuntu 20.04's pip is old
        python3 -m pip install -U pip
        python3 -m pip wheel .
        python3 -m pip install fasterrwkv*.whl
      working-directory: ${{github.workspace}}/python

    - name: Run Python tests
      run: |
        python3 -m pip install pytest
        FR_MODEL_DIR=${{env.FR_MODEL_DIR}} pytest tests
      working-directory: ${{github.workspace}}/python

    - name: Upload Python wheel
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: |
          python/fasterrwkv*.whl

    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Build Android AAR
      run: |
        # android toolchain cmake file hardcode '-g', making the binary bigger
        sed -i 's/ -g$//' $ANDROID_NDK/build/cmake/android-legacy.toolchain.cmake
        ./aar/build_aar.sh

    - name: Upload Android AAR libraries
      uses: actions/upload-artifact@v3
      with:
        name: Android AAR Packages
        path: |
          aar/java/faster-rwkv-java/build/outputs/aar/*

    - name: Rename Android binaries to upload
      run: |
        mv build-android-aar/chat build-android-aar/chat-android
        mv build-android-aar/abc_music build-android-aar/abc_music-android
        mv build-android-aar/midi_music build-android-aar/midi_music-android

    - name: Upload Android binaries
      uses: actions/upload-artifact@v3
      with:
        name: Android binaries
        path: |
          build-android-aar/chat-android
          build-android-aar/abc_music-android
          build-android-aar/midi_music-android

    - uses: "marvinpinto/action-automatic-releases@latest"
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      with:
        repo_token: "${{ secrets.GH_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          build/export_ncnn
          aar/java/faster-rwkv-java/build/outputs/aar/faster-rwkv-java-release.aar
          build-android-aar/chat-android
          build-android-aar/abc_music-android
          build-android-aar/midi_music-android

    - uses: "marvinpinto/action-automatic-releases@latest"
      if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
      with:
        repo_token: "${{ secrets.GH_TOKEN }}"
        prerelease: false
        files: |
          build/export_ncnn
          aar/java/faster-rwkv-java/build/outputs/aar/faster-rwkv-java-release.aar
          build-android-aar/chat-android
          build-android-aar/abc_music-android
          build-android-aar/midi_music-android

  build_rwkv2onnx_wheels:
    env:
      # Only build universal2 package
      # Related issue: https://github.com/pypa/cibuildwheel/issues/1190
      CIBW_ARCHS_MACOS: universal2
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_BEFORE_ALL_LINUX: WD=`pwd` && /opt/python/cp38-cp38/bin/python -m pip install --target tmp_cmake cmake && cp tmp_cmake/bin/cmake /usr/local/bin/cmake && rm -rf tmp_cmake && /opt/python/cp38-cp38/bin/python -m pip install cmake && cmake --version && whereis cmake
      CIBW_BEFORE_ALL_MACOS: WD=`pwd` && pip install cmake
      # TODO: add tests
      # CIBW_TEST_REQUIRES_LINUX: pytest flake8 onnxruntime 
      # CIBW_TEST_REQUIRES_MACOS: pytest onnxruntime 
      # CIBW_TEST_REQUIRES_WINDOWS: pytest onnxruntime 
      # CIBW_BEFORE_TEST_LINUX: pip install torch==1.13.1+cpu torchvision==0.14.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
      # CIBW_BEFORE_TEST_MACOS: pip install torch torchvision
      # CIBW_BEFORE_TEST_WINDOWS: pip install torch torchvision
      # # Skip arm test on x86. Skip python 3.11 test because of the absense of torchvision binary wheel
      # # Skip python3.7 because of onnxruntime has deprecated it
      # CIBW_TEST_SKIP: "cp37-* cp311-* *_arm64 *_universal2:arm64"
      # CIBW_TEST_COMMAND: pytest -v {project}/tests/test_python_api.py
      # Only build on Python 3 and skip 32-bit or musl builds
      CIBW_BUILD: "cp3?-* cp310-* cp311-*"
      CIBW_SKIP: "cp36-* *-win32 *-manylinux_i686 *-musllinux_*"
      CIBW_ENVIRONMENT: CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON"
      CIBW_ENVIRONMENT_WINDOWS: USE_MSVC_STATIC_RUNTIME=0 CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON"
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2
    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse export_onnx/python
    - name: Build rwkv2onnx wheels
      uses: pypa/cibuildwheel@v2.11.4
    - uses: actions/upload-artifact@v3
      with:
        name: python-dist
        path: ./wheelhouse/*.whl

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
    needs:
    - build-and-test
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/fasterrwkv
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
          
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
