name: Build and Test

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  FR_MODEL_DIR: /tmp/models

jobs:
  build-and-test:
    # Use ubuntu 20.04 to build with enough old glibc, so that products can be distributed to more Linux distributions
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Install Ninja
      run: |
        sudo apt-get install ninja-build

    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Build Android AAR
      run: |
        ./aar/build_aar.sh

    - name: Download ChatRWKV Models
      run: |
        mkdir ${{env.FR_MODEL_DIR}}
        cd ${{env.FR_MODEL_DIR}}
        wget https://huggingface.co/BlinkDL/rwkv-4-world/resolve/main/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth 
        wget https://huggingface.co/BlinkDL/rwkv-5-world/resolve/main/RWKV-5-World-0.1B-v1-20230803-ctx4096.pth
        wget https://huggingface.co/BlinkDL/rwkv-5-music/resolve/main/RWKV-5-ABC-82M-v1-20230901-ctx1024.pth
    - name: Convert ChatRWKV Models
      run: |
        git clone https://github.com/BlinkDL/ChatRWKV
        cd ChatRWKV
        pip install -r requirements.txt
        pip install numpy
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        cd rwkv_pip_package
        pip install .
        cd ..
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32-converted.pth --strategy "cuda fp32"
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16-converted.pth --strategy "cuda fp16"
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32-converted.pth --strategy "cuda fp32"
        python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32-converted.pth --strategy "cuda fp32"
        cd ..
        pip install -r tools/requirements.txt
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32.fr
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16.fr
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32.fr
        python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32.fr

    - name: Build
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -GNinja
        cmake --build ${{github.workspace}}/build

    - name: Convert the v5 ABC model to ncnn
      run: |
        ${{github.workspace}}/build/export_ncnn ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32.fr ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-ncnn fp16

    - name: Run ABC ppl test
      run: |
        pip install datasets msgpack
        python3 tests/run_abc_benchmark.py ${{github.workspace}}/build/tests/run_abc_benchmark ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-ncnn

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        FR_MODEL_DIR=${{env.FR_MODEL_DIR}} ctest -C ${{env.BUILD_TYPE}} -vv --output-on-failure

    - name: Upload Android AAR libraries
      uses: actions/upload-artifact@v3
      with:
        name: Android AAR Packages
        path: |
          aar/java/faster-rwkv-java/build/outputs/aar/*
    - name: Upload Executables
      uses: actions/upload-artifact@v3
      with:
        name: export_ncnn
        path: |
          build/export_ncnn
    - uses: "marvinpinto/action-automatic-releases@latest"
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      with:
        repo_token: "${{ secrets.GH_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          build/export_ncnn
          aar/java/faster-rwkv-java/build/outputs/aar/faster-rwkv-java-release.aar
          build-android/chat
          build-android/abc_music

    - uses: "marvinpinto/action-automatic-releases@latest"
      if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
      with:
        repo_token: "${{ secrets.GH_TOKEN }}"
        prerelease: false
        files: |
          build/export_ncnn
          aar/java/faster-rwkv-java/build/outputs/aar/faster-rwkv-java-release.aar
          build-android/chat
          build-android/abc_music

